generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  email         String       @unique
  emailVerified DateTime?
  image         String?
  customImage   String?
  password      String?
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  soundboards   Soundboard[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Soundboard {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  price       Float?
  slug        String?  @unique
  userId      String
  plays       Int      @default(0)
  likes       Int      @default(0)
  globalScale Float    @default(1.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  zones       Zone[]
}

model Zone {
  id           Int         @id @default(autoincrement())
  label        String      @default("")
  animationKey String      @default("burst")
  animationCfg Json?
  isActive     Boolean     @default(true)
  soundboardId String?
  position     Int
  samples      Sample[]
  soundboard   Soundboard? @relation(fields: [soundboardId], references: [id], onDelete: Cascade)

  @@unique([soundboardId, position], name: "unique_soundboard_position", map: "unique_soundboard_position")
}

model Sample {
  id        String   @id @default(cuid())
  zoneId    Int
  url       String
  label     String   @default("")
  gainDb    Float    @default(0)
  createdAt DateTime @default(now())
  zone      Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
}

model Preset {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
}

model Settings {
  id          Int   @id @default(1)
  globalScale Float @default(1.0)
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}
